#include <iostream>
#include <tchar.h>
#include <windows.h>
#include <stdio.h>

using namespace std;

void print_error_message()
{
	TCHAR* buffer;
	DWORD error_code = GetLastError();

	FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL, error_code, MAKELANGID(LANG_ENGLISH, SUBLANG_DEFAULT), (LPTSTR)&buffer, 0, NULL);

	_tprintf(_T("%s\n"), buffer);
	LocalFree(buffer);
}

int _tmain()
{
	HANDLE h, g,f;
	TCHAR fname1[100], fname2[100], fname3[100];

	cout << "enter fname1: ";
	wcin.getline(fname1, 100);

	cout << "\nenter fname2: ";
	wcin.getline(fname2, 100);

	cout << "\nenter fname3: ";
	wcin.getline(fname3, 100);

		h = CreateFile(fname1, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
		if (h == INVALID_HANDLE_VALUE) print_error_message();
		else
		{
			char a; unsigned long z;
			SetFilePointer(h, -10, NULL, FILE_END);
			ReadFile(h, &a, 1, &z, NULL);
			if (a >= 'A' && a <= 'Z')
			{
				SetFilePointer(h, 5, NULL, FILE_BEGIN);
				char b[10];
				ReadFile(h, b, 10, &z, NULL);

				g = CreateFile(fname2, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
				if (g == INVALID_HANDLE_VALUE)
				{
					print_error_message(); CloseHandle(h);
				}
				else
				{
					WriteFile(g, b, 10, &z, NULL);
					CloseHandle(h); CloseHandle(g);
				}
			}
			else
			{
				CloseHandle(h); CopyFile(fname1, fname3, FALSE);
			}
			DeleteFile(fname1);
		}
	return 0;
}